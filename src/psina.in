#!/bin/bash
#
# This script wraps SINA to add some ad-hock parallelisation.
# V0.1

set -e

# Locate self
pushd . >/dev/null # save cwd
me="${BASH_SOURCE[0]}"
while [ -h "$me" ]; do 
  cd "$(dirname "$me")"
  me="$(readlink "$(basename "$me")")"
done
cd "$(dirname "$me")"
MYDIR="$PWD"
popd >/dev/null

SINA=$MYDIR/SINA

help() {
    $SINA --help || true
    cat >&2 <<EOF
Parallelization options:
   -P n                    run n instances of SINA in parallel
EOF
    exit
}

# extract our arguments from commandline
for ((n=1; n<=$#; n++)); do
    #echo $opt
    opt="${@:$n:1}"
    arg="${@:$[n+1]:1}"
    case "$opt" in
	-h|--help) help ;;
	-o|--out) DELARG=2; OUTFILE="$arg";;
	--out=*)  DELARG=1; OUTFILE="${opt#*=}";;
	-i|--in)  DELARG=2; INFILE="$arg";;
	--in=*)   DELARG=1; INFILE="${opt#*=}";;
	-P)       DELARG=2; NCPU="$arg";;
	-P*)      DELARG=1; NCPU="${opt#*=}";;
	--fasta-block) DELARG=2; BLOCK="$arg";;
	--fasta-block=*) DELARG=1; BLOCK="${opt#*=}";;
    esac
    if [ -n "$DELARG" ]; then
	set -- "${@:1:$[$n-1]}" "${@:$[$n+$DELARG]}"
	unset DELARG
	n=$[n - 1];
    fi
done

if [ -z "$OUTFILE" ]; then
    echo "Please specify an output file with '-o'. See $0 -h for help." 1>&2
    exit 2
fi
if [ -z "${OUTFILE#*.arb}" -o -z "${OUTFILE#*.ARB}" ]; then
    echo "$0 can only use FASTA files as input and output" >&2
    exit 2
fi
if [ -e "$OUTFILE" ]; then
    echo "Creating backup of $OUTFILE before overwriting." >&2
    mv "${OUTFILE}" "${OUTFILE}.sina.bkup"
fi

if [ -z "$INFILE" ]; then
    echo "Please specify an input file with '-i'. See $0 -h for help." 1>&2
    exit 2
fi
if [ -z "${INFILE#*.arb}" -o -z "${INFILE#*.ARB}" ]; then
    echo "$0 can only use FASTA files as input and output" >&2
    exit 2
fi
if [ ! -e "$INFILE" ]; then
    echo "Input file '$INFILE' not found." >&2
    exit 2
fi
if [ ! -r "$INFILE" ]; then
    echo "Failed to read '$INFILE'. Please check file permissions." >&2
    exit 2
fi
if [ -z "$NCPU" ]; then
    cat >&2 <<EOF
Please use '-P' to set the number of processes requested.
CAUTION: Make sure you have sufficient memory to run the requested number
         of SINA instances in parallel.
EOF
    exit 2
fi
if [ -z "$BLOCK" ]; then
    echo "$0: Setting block size to 200kb" >&2
    BLOCK=200000
fi

INSIZE=`stat -c %s "$INFILE"`
echo "$0: Input file size: $INSIZE" >&2
NBLOCKS=$[ ($INSIZE-1) / $BLOCK +1 ]
echo "$0: Number of blocks to process: $NBLOCKS"

## create private temporary directory
tmp=${TMPDIR-/tmp}
tmp=$tmp/sina.$RANDOM.$RANDOM.$RANDOM.$$
(umask 077 && mkdir $tmp) || {
    echo "Could not create temporary directory! Exiting." 1>&2 
    exit 1
}
trap "rm -rf $tmp" EXIT

seq 0 $NBLOCKS |\
    xargs -t -P $NCPU -L 1 -I %SINA_NBLOCK% \
	  $SINA "$@" -i "$INFILE" -o "$tmp"/out.%SINA_NBLOCK%.fasta --fasta-block=$BLOCK --fasta-idx=%SINA_NBLOCK%

cat "$tmp"/out.*.fasta > "$OUTFILE"


